<?xml version="1.0" encoding="UTF-8"?>

<!--设置log4j2的自身log级别为warn -->
<!-- Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出。 -->
<!-- monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数。 -->
<configuration status="WARN" >

	<properties>
        <Property name="log_path">Logs/standard</Property>
    </properties>
	<!--先定义所有的appender -->
	<appenders>
		<!--输出到控制台 -->
		<console name="stdout" target="SYSTEM_OUT">
			<PatternLayout pattern="[%-d{yyyy-MM-dd HH:mm:ss:SSS}] [%5p ] [ %L ] -LOGGER: >>>>>>>>>>>>>> %m%n" />
		</console>

		<!--输出到文件（info） 每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
		<RollingFile name="logInfo" fileName="${log_path}/info.log" filePattern="${log_path}/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log">
			<PatternLayout pattern="[%-d{yyyy-MM-dd HH:mm:ss:SSS}] [%5p ] [ %l ] -LOGGER: >>>>>>>>>>>>>> %m%n" />
			<Filters>
				<ThresholdFilter level="INFO" />
				<ThresholdFilter level="WARN" onMatch="DENY" onMismatch="NEUTRAL" />
			</Filters>
			<Policies>
				<!-- 归档每天的文件 -->
				<TimeBasedTriggeringPolicy />
				<!-- 限制单个文件大小 -->
				<SizeBasedTriggeringPolicy size="100 MB" />
			</Policies>
			<!-- 限制每天文件个数 -->
			<DefaultRolloverStrategy compressionLevel="0" max="300" />
		</RollingFile>


		<RollingFile name="logError" fileName="${log_path}/error.log" filePattern="${log_path}/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log">
			<PatternLayout pattern="[%-d{yyyy-MM-dd HH:mm:ss:SSS}] [%5p ] [ %l ] -LOGGER: >>>>>>>>>>>>>> %m%n" />
			<Filters>
				<ThresholdFilter level="ERROR" />
			</Filters>
			<Policies>
				<TimeBasedTriggeringPolicy />
				<SizeBasedTriggeringPolicy size="100 MB" />
			</Policies>
			<DefaultRolloverStrategy max="300" />
		</RollingFile>

	</appenders>
	
	<!--定义logger，只有定义了logger并引入的appender，appender才会生效-->
	<loggers>
		<!--采用异步输出日志-->
        <AsyncLogger name="sy" level="info" includeLocation="true">
            <!--写入info级别-->
            <AppenderRef ref="logInfo"/>
            <!--写入error级别-->
            <AppenderRef ref="logError" level="error"/>
        </AsyncLogger>
        
		<!-- 级别顺序（低到高）：TRACE < DEBUG < INFO < WARN < ERROR < FATAL < ALL-->
		<root level="info" includeLocation="true">
			<appender-ref ref="stdout" />
		</root>
	</loggers>
</configuration>